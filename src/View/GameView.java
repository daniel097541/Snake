/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.SnakePanel;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import Packets.DirectionPacket;
import Packets.MovementPacket;
import Packets.PointsPacket;
import Server.Server;

/**
 *
 * @author Juan Enrique
 */
public class GameView extends javax.swing.JFrame {

    JPanel matriz[][] = new JPanel[40][60];
    JPanel inicial;
    int inicialX;
    int inicialY;
    int direccion = 3;
    SnakePanel p;
    int tesoroX = 0;
    int tesoroY = 0;

    /**
     * Creates new form GameView2
     */
    public GameView(SnakePanel p) {
        initComponents();
        for (int i = 0; i < 40; i++) {
            for (int j = 0; j < 60; j++) {
                matriz[i][j] = (JPanel) jPanel1.add(new JPanel());
                matriz[i][j].setBackground(Color.white);
            }
        }
        inicial = matriz[0][0];
        inicial.setBackground(Color.red);
        inicialX = 0;
        inicialY = 0;
        
        this.p = p;
        
        tesoroX = this.p.getBonus().generateRandomNumberX();
        tesoroY = this.p.getBonus().generateRandomNumberY();
        System.out.println(tesoroX+" , "+tesoroY);
        matriz[tesoroX][tesoroY].setBackground(Color.yellow);



    }

    private GameView() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridLayout(40, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_P) {
            boolean pausa = true;
            if (p.isPausa()) {
                pausa = false;
            }
            p.setPausa(pausa);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ADD) {
            if (this.p.getVelocidad() <= 600) {
                this.p.setVelocidad(this.p.getVelocidad() - 50);

            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_SUBTRACT) {
            if (this.p.getVelocidad() >= 50) {
                this.p.setVelocidad(this.p.getVelocidad() + 50);
            }
        }

        actualizarPosicion(evt);
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
    public void treasures(int xAux, int yAux) {
        if((xAux==tesoroX)&&(yAux==tesoroY)){
            //Aqui faltaria lo de los puntos
            matriz[xAux][yAux].setBackground(Color.white);
            tesoroX = this.p.getBonus().generateRandomNumberX();
            tesoroY = this.p.getBonus().generateRandomNumberY();
            System.out.println(tesoroX+" , "+tesoroY);
            matriz[tesoroX][tesoroY].setBackground(Color.yellow);
        }
    }

    public void detectarTesoros(){
        if((inicialX == tesoroX)||(inicialY == tesoroY)){
            Integer points = this.p.getBonus().generateRandomPoints();
            //String [] args = {"ID",String.valueOf(points)};
            //PointsPacket pointsPacket = new PointsPacket(args);
            treasures(inicialX,inicialY);
        }
    }
    

    public void actualizarPosicion(java.awt.event.KeyEvent evt) {
        JPanel auxiliar;
        auxiliar = inicial;

        if (evt.getKeyCode() == KeyEvent.VK_UP) {//movimiento hacia arriba
            matriz[inicialX][inicialY].setBackground(Color.white);
            inicialX--;
            matriz[inicialX][inicialY].setBackground(Color.red);
            direccion = 1;
            //String [] args = {"ARRIBA"};
            //DirectionPacket dir = new DirectionPacket(args);
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {//movimiento hacia abajo            
            matriz[inicialX][inicialY].setBackground(Color.white);
            inicialX++;
            matriz[inicialX][inicialY].setBackground(Color.red);
            direccion = 2;
            //String [] args = {"ABAJO"};
            //DirectionPacket dir = new DirectionPacket(args);
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {//movimiento hacia la derecha
            matriz[inicialX][inicialY].setBackground(Color.white);
            inicialY++;
            matriz[inicialX][inicialY].setBackground(Color.red);
            direccion = 3;
            //String [] args = {"DER"};
            //DirectionPacket dir = new DirectionPacket(args);
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {//movimiento hacia la izquierda
            matriz[inicialX][inicialY].setBackground(Color.white);
            inicialY--;
            matriz[inicialX][inicialY].setBackground(Color.red);
            direccion = 4;
            //String [] args = {"IZQ"};
            //DirectionPacket dir = new DirectionPacket(args);
        }
    }

    public void actualizarPosicion() {

        try {
            if (direccion == 1) {
                matriz[inicialX][inicialY].setBackground(Color.white);
                inicialX--;
                matriz[inicialX][inicialY].setBackground(Color.red);
                //String [] args = {"ID",String.valueOf(inicialX),String.valueOf(inicialY),String.valueOf(inicialX++),String.valueOf(inicialY)};
                //MovementPacket mov = new MovementPacket(args);
            }
            if (direccion == 2) {
                matriz[inicialX][inicialY].setBackground(Color.white);
                inicialX++;
                matriz[inicialX][inicialY].setBackground(Color.red);
                //String [] args = {"ID",String.valueOf(inicialX),String.valueOf(inicialY),String.valueOf(inicialX--),String.valueOf(inicialY)};
                //MovementPacket mov = new MovementPacket(args);
            }
            if (direccion == 3) {
                matriz[inicialX][inicialY].setBackground(Color.white);
                inicialY++;
                matriz[inicialX][inicialY].setBackground(Color.red);
                //String [] args = {"ID",String.valueOf(inicialX),String.valueOf(inicialY),String.valueOf(inicialX),String.valueOf(inicialY--)};
                //MovementPacket mov = new MovementPacket(args);
            }
            if (direccion == 4) {
                matriz[inicialX][inicialY].setBackground(Color.white);
                inicialY--;
                matriz[inicialX][inicialY].setBackground(Color.red);
                //String [] args = {"ID",String.valueOf(inicialX),String.valueOf(inicialY),String.valueOf(inicialX),String.valueOf(inicialY++)};
                //MovementPacket mov = new MovementPacket(args);
            }
            //treasures(inicialX, inicialY);
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            String result;
            JOptionPane.showMessageDialog(null, "¡Has perdido por llegar a la frontera!");
            System.exit(0);
        }
    }
}
